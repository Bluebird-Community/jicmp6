version: 2.1

orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.5
  sign-packages: opennms/sign-packages@3.0.0

parameters:
  debian-version:
    type: string
    default: stretch
  maven-version:
    type: string
    default: 3.6.3
  # use the oldest version
  xcode-version:
    type: string
    default: 11.7.0

executors:
  base-executor:
    docker:
      - image: cimg/base:stable-20.04
  package-executor:
    machine:
      image: ubuntu-2004:current
  centos-executor:
    docker:
      - image: opennms/build-env:1.8.0.302.b08-3.6.3-b8090
  debian-executor:
    docker:
      - image: opennms/build-env:debian-jdk8-b8766

commands:
  cache-restore:
    parameters:
      key:
        description: the unique id for this cache
        type: string
      path:
        description: the path to restore to
        type: string
    description: "Restore Cache: << parameters.key >>"
    steps:
      - restore_cache:
          keys:
            - cache-v2-<< parameters.key >>-{{ .Branch }}-{{ .Revision }}
            - cache-v2-<< parameters.key >>-{{ .Branch }}
            - cache-v2-<< parameters.key >>-
      - run:
          name: "extract tarball to << parameters.path >>"
          command: |
            if [ -e "/tmp/cache-<< parameters.key >>.tar.gz" ]; then
              mkdir -p "<< parameters.path >>"
              if [ "$UID" -eq 0 ]; then
                tar -C "<< parameters.path >>" -xvzf "/tmp/cache-<< parameters.key >>.tar.gz"
              else
                sudo tar -C "<< parameters.path >>" -xvzf "/tmp/cache-<< parameters.key >>.tar.gz"
                sudo chown -R "$UID" "<< parameters.path >>"
              fi
            else
              echo "warning: attempting to restore cache << parameters.key >> to << parameters.path >> but no cache file was found"
            fi

  cache-save:
    parameters:
      key:
        description: the unique id for this cache
        type: string
      path:
        description: the path to cache
        type: string
    description: "Save Cache: << parameters.key >>"
    steps:
      - run:
          name: "create a tarball from << parameters.path >>"
          command: |
            if [ -d "<< parameters.path >>" ]; then
              SAVEDIR="<< parameters.path >>"
              CACHE_TARBALL="/tmp/cache-<< parameters.key >>.tar.gz"

              if [ "$UID" -eq 0 ]; then
                rm -f "${CACHE_TARBALL}" || :
                tar -C "${SAVEDIR}" -czf "${CACHE_TARBALL}" .
                chmod a+rw "${CACHE_TARBALL}"
              else
                sudo rm -f "${CACHE_TARBALL}" || :
                sudo tar -C "${SAVEDIR}" -czf "${CACHE_TARBALL}" .
                sudo chmod a+rw "${CACHE_TARBALL}"
                sudo chown "$UID" "${CACHE_TARBALL}"
              fi
            fi
      - save_cache:
          key: cache-v2-<< parameters.key >>-{{ .Branch }}-{{ .Revision }}
          paths:
            - "/tmp/cache-<< parameters.key >>.tar.gz"

  fetch-maven:
    description: Fetch Maven
    parameters:
      maven-version:
        type: string
        default: << pipeline.parameters.maven-version >>
    steps:
      - cache-restore:
          key: maven-bin
          path: ~/maven
      - run:
          name: download and unpack Maven
          command: |
            if [ ! -x ~/maven/bin/mvn ]; then
              mkdir -p ~/maven
              export MAVEN_TARBALL="https://downloads.apache.org/maven/maven-3/<< parameters.maven-version >>/binaries/apache-maven-<< parameters.maven-version >>-bin.tar.gz"
              ( curl -sS -L -o - "$MAVEN_TARBALL" || wget --no-verbose -O - "$MAVEN_TARBALL" ) | \
                tar --strip-components=1 -C ~/maven -xvzf -
            fi
      - cache-save:
          key: maven-bin
          path: ~/maven

  fetch-debian-dependencies:
    description: Fetch Debian Dependencies
    parameters:
      type:
        type: string
    steps:
      - run:
          name: install prerequisites
          command: |
            # this makes it easier to use in circleci or root images without changing things
            SUDO="$(command -v sudo || :)"
            if [ ! -x "$SUDO" ]; then
              apt -q update
              apt -y -q --allow-unauthenticated install sudo
            fi

            sudo apt -q update
            sudo apt -y -q install gnupg2 software-properties-common

            echo "deb http://deb.debian.org/debian << pipeline.parameters.debian-version >>-backports main" | sudo tee /etc/apt/sources.list.d/<< pipeline.parameters.debian-version >>-backports.list
            echo "deb http://deb.debian.org/debian-security << pipeline.parameters.debian-version >>/updates main" | sudo tee /etc/apt/sources.list.d/<< pipeline.parameters.debian-version >>-security.list
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC 648ACFD622F3D138 0E98404D386FA1D9 AA8E81B4331F7F50 112695A0E562B32A
            sudo apt -q update
            sudo apt -y -q -t << pipeline.parameters.debian-version >>-backports install apt-transport-https ca-certificates
      - cache-restore:
          key: debian-<< parameters.type >>
          path: /var/cache/apt
      - run:
          name: download jdk
          command: sudo apt -y --download-only -q -t << pipeline.parameters.debian-version >>-backports install openjdk-8-jdk-headless
      - run:
          name: download other dependencies
          command: sudo apt -y --download-only -q install autotools-dev autoconf automake cdbs curl debhelper debianutils devscripts dpkg-dev git software-properties-common
      - cache-save:
          key: debian-<< parameters.type >>
          path: /var/cache/apt
      - run:
          name: install jdk
          command: sudo apt -y -q -t << pipeline.parameters.debian-version >>-backports install openjdk-8-jdk-headless
      - run:
          name: install other dependencies
          command: sudo apt -y -q install autotools-dev autoconf automake cdbs curl debhelper debianutils devscripts dpkg-dev git software-properties-common

  clean-caches:
    steps:
      - run:
          name: clean cache objects in ~/.m2/repository and ~/.npm older than 7 days
          command: m4/clean-m2.sh

  save-artifacts:
    description: Save Artifacts and Store Artifact Metadata
    parameters:
      path:
        type: string
      location:
        type: string
    steps:
      - store_artifacts:
          path: "<< parameters.path >>/"
          destination: "<< parameters.location >>"
      - run:
          name: "enumerate artifacts in << parameters.location >>"
          command: |
            mkdir -p ~/.artifacts
            chmod 777 ~/.artifacts
            if [ ! -d << parameters.path >> ] || [ "$(find << parameters.path >> -type f | wc -l)" -eq 0 ]; then
              echo "warning: no files found in <<parameters.path >>"
              exit 0
            fi
            if [ -e ~/.artifacts/<< parameters.location >>.txt ]; then
              echo "artifact file ~/.artifacts/<< parameters.location >>.txt already exists -- location must be unique"
              exit 1
            fi
            curl \
              -sS \
              -L \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              -H "Circle-Token: ${CIRCLE_API_TOKEN}" \
              -X GET \
              "https://circleci.com/api/v2/project/gh/OpenNMS/jicmp6/${CIRCLE_BUILD_NUM}/artifacts" \
            | grep -o 'https://[^"]*' \
            | grep "/<< parameters.location >>/" \
            > ~/.artifacts/<< parameters.location >>.txt
            cat ~/.artifacts/<< parameters.location >>.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .artifacts/<< parameters.location >>.txt

  # always use attach_workspace to root=~ first
  fetch-artifacts:
    description: Download Artifacts from a Previous Job
    parameters:
      path:
        type: string
      location:
        type: string
    steps:
      - run:
          name: "download artifacts for << parameters.location >> to << parameters.path >>"
          command: |
            CURL="$(command -v curl 2>/dev/null || :)"
            if [ -z "${CURL}" ]; then
              if command -v apt-get >/dev/null; then
                if command sudo >/dev/null; then
                  sudo apt-get update && sudo apt-get -y --no-install-recommends install ca-certificates curl
                else
                  apt-get update && apt-get -y --no-install-recommends install curl
                fi
              elif command yum >/dev/null; then
                if command sudo >/dev/null; then
                  sudo yum -y --quiet install curl
                else
                  yum -y --quiet install curl
                fi
              fi
            fi
            mkdir -p << parameters.path >> ~/.artifacts
            chmod 777 << parameters.path >> ~/.artifacts
            cd << parameters.path >>
            if [ -e ~/.artifacts/<< parameters.location >>.txt ]; then
              while read URL; do
                echo "- $URL"
                curl \
                  -sS \
                  -L \
                  -O \
                  -H "Circle-Token: ${CIRCLE_API_TOKEN}" \
                  "${URL}"
              done \
                < ~/.artifacts/<< parameters.location >>.txt
            else
              echo "artifact file ~/.artifacts/<< parameters.location >>.txt does not exist"
              exit 1
            fi
            cd -

  do-docker-build:
    description: Do Build in Docker
    parameters:
      platform:
        type: enum
        enum: ["arm32v7", "arm64v8", "i386", "amd64"]
    steps:
      - run:
          name: build << parameters.platform >>
          command: |
            case "<< parameters.platform >>" in
              arm32v7)
                PLATFORM="linux/arm/v7"
                ;;
              arm64)
                PLATFORM="linux/arm64"
                ;;
              i386)
                PLATFORM="linux/i386"
                ;;
              amd64)
                PLATFORM="linux/amd64"
                ;;
            esac
            set | grep CIRCLE > /tmp/build-env.txt
            docker run --rm --privileged tonistiigi/binfmt:latest --install all
            docker run --env-file /tmp/build-env.txt --rm -it --platform "${PLATFORM}" -v "$(pwd):/workdir" -w /workdir "<< parameters.platform >>/debian:buster" ./build-all.sh "<< parameters.platform >>"

jobs:
  build-from-source:
    executor: base-executor
    resource_class: small
    steps:
      - checkout
      - run:
          name: fetch dependencies
          command: |
            sudo apt-get update
            sudo apt-get -y --no-install-recommends install \
              autoconf \
              automake \
              gcc \
              libtool \
              openjdk-8-jdk-headless \
              rpm
      - fetch-maven
      - cache-restore:
          key: maven
          path: $HOME/.m2
      - run:
          name: autoconf and configure
          command: |
            git submodule update --init
            autoreconf -fvi
      - clean-caches
      - run:
          name: build
          command: |
            ./configure
            make dist
            ~/maven/bin/mvn install
            mkdir -p ~/artifacts/{source,java}
            mv jicmp6-*.tar.gz ~/artifacts/source/
            mv target/*.jar ~/artifacts/java/
            make clean
      - cache-save:
          key: maven
          path: $HOME/.m2
      - save-artifacts:
          path: ~/artifacts/source
          location: source
      - save-artifacts:
          path: ~/artifacts/java
          location: java
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-mac:
    macos:
      xcode: << pipeline.parameters.xcode-version >>
    steps:
      - fetch-maven
      - attach_workspace:
          at: ~/
      - run:
          name: install OpenJDK 8
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install "openjdk@8"
            sudo ln -sfn /usr/local/opt/openjdk@8/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-8.jdk
      - run:
          name: configure and build
          command: |
            export PATH="$HOME/maven/bin:$PATH"
            ./configure
            make
            make install DESTDIR="$(pwd -P)/target"
      - run:
          name: collect mac binaries
          when: always
          command: |
            mkdir -p ~/artifacts/macosx
            mv target/usr/local/lib/*jicmp6* ~/artifacts/macosx/
      - save-artifacts:
          path: ~/artifacts/macosx
          location: macosx

  build-packages:
    parameters:
      platform:
        type: string
      resource:
        type: string
    executor: package-executor
    resource_class: << parameters.resource >>
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - attach_workspace:
          at: ~/
      - fetch-artifacts:
          path: ~/artifacts/source/
          location: source
      - run:
          name: move tarball to be docker-accessible
          command: mv ~/artifacts/source/*.tar.gz .
      - do-docker-build:
          platform: << parameters.platform >>
      - run:
          name: arrange artifacts
          command: |
            mkdir -p ~/artifacts/{deb,rpm}
            cp target/*.rpm ~/artifacts/rpm/
            cp target/*.deb ~/artifacts/deb/
      - save-artifacts:
          path: ~/artifacts/deb
          location: << parameters.platform >>-deb
      - save-artifacts:
          path: ~/artifacts/rpm
          location: << parameters.platform >>-rpm

  sign-rpms:
    executor: package-executor
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - fetch-artifacts:
          path: ~/artifacts/rpm/
          location: arm32v7-rpm
      - fetch-artifacts:
          path: ~/artifacts/rpm/
          location: arm64v8-rpm
      - fetch-artifacts:
          path: ~/artifacts/rpm/
          location: i386-rpm
      - fetch-artifacts:
          path: ~/artifacts/rpm/
          location: amd64-rpm
      - run:
          name: install dependencies
          command: |
            sudo apt-get update
            sudo apt-get -y install gnupg2 rpm
      - sign-packages/setup-env:
          gnupg_home: ~/tmp/gpg
      - run:
          name: prepare artifacts
          command: |
            cd ~
            mkdir -p artifacts/rpm-signed/
            find artifacts/rpm -name \*.rpm | while read -r INFILE; do
              OUTFILE="$(echo "$INFILE" | sed -e 's,artifacts/rpm,artifacts/rpm-signed,g')"
              docker run -v `pwd`:/workspace -w /workspace opennms/rpm-add-checksum -- "${INFILE}" "${OUTFILE}"
            done
      - sign-packages/sign-rpms:
          gnupg_home: ~/tmp/gpg
          gnupg_key: opennms@opennms.org
          packages: ~/artifacts/rpm-signed/*.rpm
      - save-artifacts:
          path: ~/artifacts/rpm-signed
          location: rpm-signed

  sign-debs:
    executor: debian-executor
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/
      - fetch-artifacts:
          path: ~/artifacts/deb
          location: arm32v7-deb
      - fetch-artifacts:
          path: ~/artifacts/deb
          location: arm64v8-deb
      - fetch-artifacts:
          path: ~/artifacts/deb
          location: i386-deb
      - fetch-artifacts:
          path: ~/artifacts/deb
          location: amd64-deb
      - sign-packages/install-deb-dependencies
      - sign-packages/setup-env:
          gnupg_home: ~/tmp/gpg
      - sign-packages/sign-debs:
          gnupg_home: ~/tmp/gpg
          gnupg_key: opennms@opennms.org
          packages: ~/artifacts/deb/*.deb
      - run:
          name: prepare artifacts
          command: |
            mkdir -p ~/artifacts/debian-signed/
            cp -f ~/artifacts/deb/* ~/artifacts/debian-signed/
      - save-artifacts:
          path: ~/artifacts/debian-signed/
          location: debian-signed

  publish:
    executor: cloudsmith/default
    resource_class: small
    parameters:
      target_repository:
        type: string
        default: opennms/common-testing
    steps:
      - attach_workspace:
          at: ~/
      - fetch-artifacts:
          path: ~/artifacts/rpm-signed
          location: rpm-signed
      - fetch-artifacts:
          path: ~/artifacts/debian-signed
          location: debian-signed
      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: rpm
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/rpm-signed/jicmp6-*.armv7hl.rpm
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: rpm
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/rpm-signed/jicmp6-*.aarch64.rpm
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: rpm
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/rpm-signed/jicmp6-*.i686.rpm
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: rpm
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/rpm-signed/jicmp6-*.x86_64.rpm
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: deb
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/debian-signed/jicmp6_*_armhf.deb
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: deb
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/debian-signed/jicmp6_*_arm64.deb
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: deb
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/debian-signed/jicmp6_*_i386.deb
      - cloudsmith/publish:
          allow-republish: true
          cloudsmith-repository: << parameters.target_repository >>
          package-format: deb
          package-distribution: any-distro/any-version
          package-path: ~/artifacts/debian-signed/jicmp6_*_amd64.deb

  build-docs:
    docker:
      - image: cimg/openjdk:8.0-node
    resource_class: small
    steps:
      - fetch-maven
      - attach_workspace:
          at: ~/
      - fetch-debian-dependencies:
          type: docs
      - cache-restore:
          key: maven
          path: $HOME/.m2
      - cache-restore:
          key: node
          path: $HOME/.npm
      - clean-caches
      - run:
          name: Build Documentation
          command: |
            ./configure
            make docs
            mkdir -p ~/artifacts
            mv target/*-javadoc.jar ~/artifacts/
      - cache-save:
          key: node
          path: $HOME/.npm
      - save-artifacts:
          path: ~/artifacts
          location: docs

  publish-docs:
    docker:
      - image: cimg/openjdk:8.0-node
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - fetch-artifacts:
          location: docs
          path: ~/docs
      - run:
          name: commit to gh-pages
          command: |
            git config user.email "cicd-system@opennms.com"
            git config user.name "CI/CD System"
            git fetch
            git checkout gh-pages
            git reset --hard origin/gh-pages
            rm -rf *
            git clean -fdx
            unzip ~/docs/jicmp6-api*.jar
            git add -A
            if [ "$(git diff HEAD | wc -l)" -gt 0 ]; then
              echo "changes detected; committing update"
              git commit -m 'build: updated javadoc'
            fi
            git push origin gh-pages:gh-pages

workflows:
  version: 2.1

  build-workflow:
    jobs:
      - build-from-source:
          filters:
            tags:
              only:
                - /jicmp.*/
            branches:
              ignore: gh-pages
      - build-docs:
          requires:
            - build-from-source
          filters:
            tags:
              only:
                - /jicmp.*/
      - build-packages:
          matrix:
            alias: build-packages-arm
            parameters:
              platform: ["arm32v7", "arm64v8"]
              resource: ["arm.medium"]
          requires:
            - build-from-source
          filters:
            tags:
              only:
                - /jicmp.*/
      - build-packages:
          matrix:
            alias: build-packages-intel
            parameters:
              platform: ["i386","amd64"]
              resource: ["medium"]
          requires:
            - build-from-source
          filters:
            tags:
              only:
                - /jicmp.*/
      - build-mac:
          requires:
            - build-from-source
          filters:
            tags:
              only:
                - /jicmp.*/
      - sign-debs:
          requires:
            - build-packages-arm
            - build-packages-intel
          filters:
            tags:
              only:
                - /jicmp.*/
      - sign-rpms:
          requires:
            - build-packages-arm
            - build-packages-intel
          filters:
            tags:
              only:
                - /jicmp.*/
      - publish:
          requires:
            - sign-debs
            - sign-rpms
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - publish:
          target_repository: opennms/common
          requires:
            - sign-debs
            - sign-rpms
          filters:
            tags:
              only:
                - /jicmp.*/
            branches:
              ignore: /.*/
      - publish-docs:
          filters:
            tags:
              only:
                - /jicmp.*/
            branches:
              ignore: /.*/
          requires:
            - build-docs
